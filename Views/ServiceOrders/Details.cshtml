@model CarWorkshopManagementSystem.Models.ServiceOrder
@using CarWorkshopManagementSystem.Extensions // Do użycia GetDisplayName()
@using CarWorkshopManagementSystem.Models
@using Microsoft.AspNetCore.Mvc.Rendering
@using System.Linq // KLUCZOWY using dla metody .Any()

@{
    ViewData["Title"] = "Szczegóły Zlecenia";
}

<h1>Szczegóły Zlecenia #@Model.Id</h1>
<hr />

<div>
    <dl class="row">
        <dt class="col-sm-4">
            Pojazd:
        </dt>
        <dd class="col-sm-8">
            @if (Model.Vehicle != null)
            {
                @($"{Model.Vehicle.Brand} {Model.Vehicle.Model} ({Model.Vehicle.RegistrationNumber})")
            }
            else
            {
                <span>Brak przypisanego pojazdu</span>
            }
        </dd>
        <dt class="col-sm-4">
            Opis problemu:
        </dt>
        <dd class="col-sm-8">
            @Html.DisplayFor(model => model.Description)
        </dd>
        <dt class="col-sm-4">
            Data utworzenia:
        </dt>
        <dd class="col-sm-8">
            @Html.DisplayFor(model => model.CreationDate)
        </dd>
        <dt class="col-sm-4">
            Przypisany mechanik:
        </dt>
        <dd class="col-sm-8">
            @(Model.AssignedMechanic?.UserName ?? "Nieprzypisany")
        </dd>
        <dt class="col-sm-4">
            Aktualny status:
        </dt>
        <dd class="col-sm-8">
            @Model.Status.GetDisplayName()
        </dd>
        @if (Model.CompletionDate.HasValue)
        {
            <dt class="col-sm-4">
                Data zakończenia:
            </dt>
            <dd class="col-sm-8">
                @Html.DisplayFor(model => model.CompletionDate)
            </dd>
        }
    </dl>
</div>

<hr />

<h3>Zadania</h3>
<div id="serviceTasksContainer">
    @if (Model.Tasks != null && Model.Tasks.Any()) // Sprawdzenie dla .Any()
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Opis</th>
                    <th>Status</th>
                    <th>Cena robocizny</th>
                    <th>Części</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model.Tasks)
                {
                    <tr>
                        <td>@task.Description</td>
                        <td>@(task.Status.GetDisplayName())</td> @* Poprawione na nawiasy dla pewności *@
                        <td>@task.LaborCost.ToString("C")</td>
                        <td>
                            @if (task.UsedParts != null && task.UsedParts.Any()) // Sprawdzenie dla .Any()
                            {
                                <ul>
                                    @foreach (var usedPart in task.UsedParts)
                                    {
                                        <li>@(usedPart.Part?.Name ?? "Nieznana część") (@usedPart.Quantity szt.) - @((usedPart.Quantity * (usedPart.Part?.UnitPrice ?? 0m)).ToString("C"))</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <span>Brak użytych części.</span>
                            }
                        </td>
                        <td>
                            <a asp-action="EditTask" asp-route-id="@task.Id" class="btn btn-sm btn-info">Edytuj</a>
                            <a asp-action="DeleteTask" asp-route-id="@task.Id" class="btn btn-sm btn-danger">Usuń</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Brak przypisanych zadań do tego zlecenia.</p>
    }
</div>

<hr />

<h3>Dodaj nowe zadanie</h3>
<div class="row">
    <div class="col-md-6">
        <form asp-action="AddTask" asp-route-id="@Model.Id" method="post">
            <div asp-validation-summary="All" class="text-danger"></div> @* Zmienione na "All" dla łatwiejszego debugowania *@
            <input type="hidden" name="ServiceOrderId" value="@Model.Id" />

            <div class="form-group mb-3">
                <label for="Description" class="control-label">Opis zadania</label>
                <input type="text" name="Description" class="form-control" required />
                <span class="text-danger" data-valmsg-for="Description" data-valmsg-replace="true"></span> @* Dodano atrybuty dla JS walidacji *@
            </div>

            <div class="form-group mb-3">
                <label for="LaborCost" class="control-label">Koszt robocizny</label>
                <input type="number" step="0.01" name="LaborCost" class="form-control" value="0.00" required />
                <span class="text-danger" data-valmsg-for="LaborCost" data-valmsg-replace="true"></span> @* Dodano atrybuty dla JS walidacji *@
            </div>

            <div class="form-group mb-3">
                <label for="Status" class="control-label">Status zadania</label>
                <select name="Status" class="form-control" asp-items="Html.GetEnumSelectList<ServiceTaskStatus>()">
                    <option value="">-- Wybierz status --</option> @* Dodano pustą opcję *@
                </select>
                <span class="text-danger" data-valmsg-for="Status" data-valmsg-replace="true"></span> @* Dodano atrybuty dla JS walidacji *@
            </div>

            <h4>Użyte części</h4>
            <div id="usedPartsContainer" class="mb-3">
                @* Początkowo może być puste, albo z jednym wierszem. JS doda pierwszy wiersz jeśli pusto. *@
                @* Usunąłem tutaj statyczny wiersz, aby partIndex w JS był zawsze spójny z tym, co dodajemy *@
            </div>
            <button type="button" id="addPartButton" class="btn btn-secondary mb-3">Dodaj kolejną część</button>

            <div class="form-group">
                <input type="submit" value="Dodaj Zadanie" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<hr />

<h3>Komentarze</h3>
<div id="serviceCommentsContainer">
    @if (Model.Comments != null && Model.Comments.Any())
    {
        <ul class="list-group mb-3">
            @foreach (var comment in Model.Comments.OrderByDescending(c => c.CreatedAt))
            {
                <li class="list-group-item">
                    <strong>@comment.Author?.UserName</strong> (@comment.CreatedAt.ToString("yyyy-MM-dd HH:mm")):
                    <p class="mb-1">@comment.Content</p>
                    <a asp-action="DeleteComment" asp-route-id="@comment.Id" class="btn btn-sm btn-danger float-end">Usuń</a>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Brak komentarzy do tego zlecenia.</p>
    }
</div>

<hr />

<h3>Akcje</h3>
<div>
    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary mt-3">Edytuj zlecenie</a> |
    <a asp-action="ChangeStatus" asp-route-id="@Model.Id" class="btn btn-info mt-3">Zmień status</a> |
    <a asp-action="Index" class="btn btn-secondary mt-3">Powrót do listy zleceń</a>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Przekaż dane części z ViewBag do JavaScriptu jako JSON
            // WAŻNE: W KONTROLERZE MUSISZ PRZEKAZYWAĆ LISTĘ OBIEKTÓW PART (lub anonimowych typów), A NIE SelectList.
            // Przykład w kontrolerze: ViewBag.Parts = await _partService.GetAllPartsAsync();
            const partData = @Html.Raw(Json.Serialize(ViewBag.Parts));

            let partIndex = 0; // Zaczynamy indeksowanie od 0 dla nowych części

            // Funkcja do dodawania nowego wiersza części
            function addPartRow() {
                const container = document.getElementById('usedPartsContainer');
                const newPartRow = document.createElement('div');
                newPartRow.classList.add('row', 'mb-2', 'part-row');
                newPartRow.setAttribute('data-part-index', partIndex);

                let partOptionsHtml = '<option value="">-- Wybierz część --</option>';
                partData.forEach(function(part) { // Zmieniono part na obiekt Part
                    partOptionsHtml += `<option value="${part.id}">${escapeHtml(part.name)} (${part.unitPrice.toFixed(2)} zł)</option>`;
                });

                newPartRow.innerHTML = `
                    <div class="col-md-7">
                        <label for="selectedPartIds_${partIndex}_" class="form-label">Wybierz część</label>
                        <select name="selectedPartIds[${partIndex}]" class="form-select part-select" id="selectedPartIds_${partIndex}_">
                            ${partOptionsHtml}
                        </select>
                        <span class="text-danger" data-valmsg-for="selectedPartIds[${partIndex}]" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-4">
                        <label for="quantities_${partIndex}_" class="form-label">Ilość</label>
                        <input name="quantities[${partIndex}]" type="number" min="1" value="1" class="form-control quantity-input" id="quantities_${partIndex}_" />
                        <span class="text-danger" data-valmsg-for="quantities[${partIndex}]" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-danger remove-part-row" style="width: 100%;">X</button>
                    </div>
                `;
                container.appendChild(newPartRow);
                partIndex++;

                // Ponowna inicjalizacja walidacji dla nowo dodanych pól
                // Działa z jQuery Unobtrusive Validation
                $.validator.unobtrusive.parse(newPartRow);
            }

            // Dodaj początkowy wiersz części, jeśli kontener jest pusty
            if (document.querySelectorAll('.part-row').length === 0) {
                addPartRow();
            }

            // Obsługa przycisku "Dodaj kolejną część"
            document.getElementById('addPartButton').addEventListener('click', addPartRow);

            // Obsługa usuwania wierszy części
            document.getElementById('usedPartsContainer').addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-part-row')) {
                    const allPartRows = document.querySelectorAll('.part-row');
                    if (allPartRows.length > 1) { // Nie usuwaj ostatniego wiersza, jeśli jest tylko jeden
                        e.target.closest('.part-row').remove();
                        // Po usunięciu, zaktualizuj indeksy, aby były ciągłe
                        document.querySelectorAll('.part-row').forEach((row, idx) => {
                            row.setAttribute('data-part-index', idx);
                            // Aktualizuj atrybuty name i id
                            row.querySelector('.part-select').name = `selectedPartIds[${idx}]`;
                            row.querySelector('.part-select').id = `selectedPartIds_${idx}_`;
                            // Nie potrzeba data-index, ASP.NET Core MVC wiąże po name

                            row.querySelector('.quantity-input').name = `quantities[${idx}]`;
                            row.querySelector('.quantity-input').id = `quantities_${idx}_`;
                            // Nie potrzeba data-index

                            // Zaktualizuj atrybuty data-valmsg-for dla spanów walidacji
                            const partSelectValidationSpan = row.querySelector(`span[data-valmsg-for^="selectedPartIds["]`);
                            if (partSelectValidationSpan) {
                                partSelectValidationSpan.setAttribute('data-valmsg-for', `selectedPartIds[${idx}]`);
                            }
                            const quantityInputValidationSpan = row.querySelector(`span[data-valmsg-for^="quantities["]`);
                            if (quantityInputValidationSpan) {
                                quantityInputValidationSpan.setAttribute('data-valmsg-for', `quantities[${idx}]`);
                            }
                        });
                        partIndex = document.querySelectorAll('.part-row').length; // Zaktualizuj partIndex
                    } else {
                        // Jeśli jest tylko jeden wiersz, zamiast usuwać, wyczyść pola
                        const currentRow = e.target.closest('.part-row');
                        currentRow.querySelector('.part-select').value = "";
                        currentRow.querySelector('.quantity-input').value = "1";
                    }
                }
            });

            // Funkcja do bezpiecznego encodowania tekstu HTML
            function escapeHtml(text) {
                var map = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#039;'
                };
                return text.replace(/[&<>"']/g, function(m) { return map[m]; });
            }
        });
    </script>
}